{"version":3,"sources":["modules/SceneComponent.tsx","modules/MenuBar.tsx","modules/ImportFile.tsx","modules/Home.tsx","modules/position-reader.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SceneComponent","props","reactCanvas","useRef","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","renderChildrenWhenReady","onSceneReady","children","rest","useState","scene","sceneReady","sceneContext","setSceneContext","engine","canvas","engineContext","setEngineContext","useEffect","current","Engine","Scene","sceneIsReady","isReady","onReadyObservable","addOnce","runRenderLoop","activeCamera","render","console","warn","resize","getEngine","window","addEventListener","dispose","removeEventListener","ref","Provider","value","MenuBar","onImport","onReplay","Navbar","variant","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","homepage","version","onClick","ImportFile","show","onCancel","onSelect","Modal","size","onHide","Header","closeButton","Title","Body","Form","File","label","custom","onChange","ev","file","target","files","from","text","Footer","Button","WebContext","MoonTextureUrl","PlatformTextureUrl","SkyBoxUrl","RocketModelUrl","SampleUrl","PlatformRatio","Viewpoint","Vector3","SceneStatus","_t","_sampleInterval","_path","this","path","t","sampleInterval","Zero","n","length","nt","i","Math","floor","dl","p0","subtract","scale","add","dt","status","createStatus","camera","FollowCamera","radius","heightOffset","cameraAcceleration","maxCameraSpeed","createCamera1","camera2","UniversalCamera","attachControl","createCamera2","viewport","Viewport","activeCameras","push","light","HemisphericLight","intensity","buildLights","groundMat","StandardMaterial","diffuseTexture","Texture","ground","MeshBuilder","CreateGround","width","height","subdivisions","material","position","y","buildGround","platMat","platform","receiveShadows","buildPlatform","skybox","CreateBox","skyboxMaterial","backFaceCulling","reflectionTexture","CubeTexture","coordinatesMode","SKYBOX_MODE","diffuseColor","Color3","specularColor","buildSkybox","SceneLoader","ImportMesh","meshes","particles","skeletons","rocket","camera1","getCameraByName","name","lockedTarget","onRocketLoad","loadRocket","positionVectors","obs","pipe","flatMap","split","filter","map","line","parseFloat","offset","data","toArray","Home","state","importModalShown","ajax","url","responseType","response","importFile","setState","tap","onPathReady","err","onImportError","subscribe","error","Container","fluid","showImportPanel","reset","dt1","getDeltaTime","last","getMeshByName","onImportCancel","onImportFile","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad5855d5.chunk.js","sourcesContent":["import React, { useEffect, useContext, useRef, useState, FunctionComponent } from 'react';\nimport { Engine, Scene, Nullable, EngineOptions, SceneOptions, EventState, Observer, Camera } from '@babylonjs/core';\nimport { EngineCanvasContext, EngineCanvasContextType, SceneContext, SceneContextType } from 'babylonjs-hook';\nimport '../App.css';\n\nexport type BabylonjsProps = {\n    antialias?: boolean\n    engineOptions?: EngineOptions\n    adaptToDeviceRatio?: boolean\n    renderChildrenWhenReady?: boolean\n    sceneOptions?: SceneOptions\n    onSceneReady: (scene: Scene) => void\n    onRender?: (scene: Scene) => void\n    id: string\n    children?: React.ReactNode\n    width?: number;\n    height?: number;\n};\n\nexport type OnFrameRenderFn = (eventData: Scene, eventState: EventState) => void\n\n/**\n * Register a callback for before the scene renders.\n * \n * @param callback called using onBeforeRender functionality of scene\n * @param mask the mask used to filter observers\n * @param insertFirst if true will be inserted at first position, if false (default) will be last position.\n * @param callOnce only call the callback once\n */\nexport const useBeforeRender = (callback: OnFrameRenderFn, mask?: number, insertFirst?: boolean, callOnce?: boolean): void => {\n    const { scene } = useContext(SceneContext);\n\n    useEffect(() => {\n        if (scene === null) {\n            return;\n        }\n\n        const unregisterOnFirstCall: boolean = callOnce === true;\n        const sceneObserver: Nullable<Observer<Scene>> = scene.onBeforeRenderObservable.add(callback, mask, insertFirst, undefined, unregisterOnFirstCall);\n\n        if (unregisterOnFirstCall !== true) {\n            return () => {\n                scene.onBeforeRenderObservable.remove(sceneObserver);\n            }\n        }\n    })\n}\n\n/**\n * Register a callback for after the scene renders.\n * \n * @param callback called using onBeforeRender functionality of scene\n * @param mask the mask used to filter observers\n * @param insertFirst if true will be inserted at first position, if false (default) will be last position.\n * @param callOnce only call the callback once\n */\nexport const useAfterRender = (callback: OnFrameRenderFn, mask?: number, insertFirst?: boolean, callOnce?: boolean): void => {\n    const { scene } = useContext(SceneContext);\n\n    useEffect(() => {\n        if (scene === null) {\n            return;\n        }\n\n        const unregisterOnFirstCall: boolean = callOnce === true;\n        const sceneObserver: Nullable<Observer<Scene>> = scene.onAfterRenderObservable.add(callback, mask, insertFirst, undefined, unregisterOnFirstCall);\n\n        if (unregisterOnFirstCall !== true) {\n            return () => {\n                scene.onAfterRenderObservable.remove(sceneObserver);\n            }\n        }\n    })\n}\n\n/**\n * Handles creating a camera and attaching/disposing.\n * TODO: add new 4.2 parameters: useCtrlForPanning & panningMouseButton\n * @param createCameraFn function that creates and returns a camera\n * @param autoAttach Attach the input controls (default true)\n * @param noPreventDefault Events caught by controls should call prevent default\n */\nexport const useCamera = <T extends Camera>(createCameraFn: (scene: Scene) => T, autoAttach: boolean = true, noPreventDefault: boolean = true): Nullable<T> => {\n    const { scene } = useContext(SceneContext);\n    const cameraRef = useRef<Nullable<T>>(null);\n\n    useEffect(() => {\n        if (scene === null) {\n            console.warn('cannot create camera (scene not ready)');\n            return;\n        }\n\n        const camera = createCameraFn(scene);\n        if (autoAttach === true) {\n            const canvas: HTMLCanvasElement = scene.getEngine()!.getRenderingCanvas()!;\n\n            // This attaches the camera to the canvas\n            // https://github.com/BabylonJS/Babylon.js/pull/9192 (keep canvas to work with < 4.2 beta-13)\n            (camera as any).attachControl(canvas, noPreventDefault);\n        }\n        cameraRef.current = camera;\n\n        return () => {\n            if (autoAttach === true) {\n                const canvas: HTMLCanvasElement = scene.getEngine()!.getRenderingCanvas()!;\n                (camera as any).detachControl(canvas);\n            }\n            camera.dispose();\n        }\n    }, [scene, autoAttach, createCameraFn, noPreventDefault]);\n\n    return cameraRef.current;\n}\n\nexport const SceneComponent: FunctionComponent<BabylonjsProps> = props => {\n    const reactCanvas = useRef<Nullable<HTMLCanvasElement>>(null);\n    const { antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady, renderChildrenWhenReady, children, ...rest } = props;\n\n    const [sceneContext, setSceneContext] = useState<SceneContextType>({\n        scene: null,\n        sceneReady: false\n    });\n\n    const [engineContext, setEngineContext] = useState<EngineCanvasContextType>({\n        engine: null,\n        canvas: null\n    });\n\n    useEffect(() => {\n        if (reactCanvas.current) {\n            const engine = new Engine(reactCanvas.current, antialias, engineOptions, adaptToDeviceRatio);\n            setEngineContext(() => ({\n                engine,\n                canvas: reactCanvas.current\n            }));\n\n            const scene = new Scene(engine, sceneOptions);\n            const sceneIsReady = scene.isReady();\n            if (sceneIsReady) {\n                props.onSceneReady(scene);\n            } else {\n                scene.onReadyObservable.addOnce((scene) => {\n                    props.onSceneReady(scene);\n                    setSceneContext(() => ({\n                        canvas: reactCanvas.current,\n                        scene,\n                        engine,\n                        sceneReady: true,\n                    }));\n                });\n            }\n\n            engine.runRenderLoop(() => {\n                if (scene.activeCamera) {\n                    if (typeof onRender === 'function') {\n                        onRender(scene);\n                    }\n                    scene.render();\n                } else {\n                    // @babylonjs/core throws an error if you attempt to render with no active camera.\n                    // if we attach as a child React component we have frames with no active camera.\n                    console.warn('no active camera..');\n                }\n            })\n\n            const resize = () => {\n                scene.getEngine().resize();\n            }\n\n            if (window) {\n                window.addEventListener('resize', resize);\n            }\n\n            setSceneContext(() => ({\n                canvas: reactCanvas.current,\n                scene,\n                engine,\n                sceneReady: sceneIsReady,\n            }));\n\n            return () => {\n                scene.getEngine().dispose();\n\n                if (window) {\n                    window.removeEventListener('resize', resize);\n                }\n            }\n        }\n    }, [reactCanvas, adaptToDeviceRatio, antialias, engineOptions, onRender, props, sceneOptions]);\n\n    return (\n        <>\n            <canvas ref={reactCanvas} {...rest} />\n            <EngineCanvasContext.Provider value={engineContext}>\n                <SceneContext.Provider value={sceneContext}>\n                    {(renderChildrenWhenReady !== true || (renderChildrenWhenReady === true && sceneContext.sceneReady)) &&\n                        children\n                    }\n                </SceneContext.Provider>\n            </EngineCanvasContext.Provider>\n        </>\n    );\n}","import React, { FunctionComponent } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport {version, homepage} from '../../package.json';\n\n/**\n * \n */\nexport const MenuBar: FunctionComponent<Readonly<{\n  onImport?: () => void;\n  onReplay?: () => void;\n}>> = ({ onImport, onReplay }) => {\n  return (\n    <Navbar variant=\"dark\" bg=\"dark\" expand=\"lg\" >\n      <Navbar.Brand href=\"http://www.mmarini.org\">www.mmarini.org</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"navbar-nav\" />\n      <Navbar.Collapse id=\"navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href={homepage}>Rocket {version}</Nav.Link>\n          <Nav.Link onClick={() => { if (onImport) { onImport(); } }}>\n            Import\n          </Nav.Link>\n          <Nav.Link onClick={() => { if (onReplay) { onReplay(); } }}>\n            Replay\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","import React, { FunctionComponent } from 'react';\nimport { Modal, Button, Form } from 'react-bootstrap';\nimport { from, Observable } from 'rxjs';\n\ninterface ImportFileProps {\n  show: boolean;\n  onCancel?: () => void\n  onSelect?: (arg: Observable<string>) => void;\n};\n\n/**\n * \n */\nexport const ImportFile: FunctionComponent<ImportFileProps> = ({ show, onCancel, onSelect }) => {\n\n  function onFileChange(file: Blob) {\n    if (onSelect) {\n      onSelect(from(file.text()));\n    }\n  }\n\n  return (\n    <Modal size=\"lg\" show={show} onHide={() => { if (onCancel) { onCancel(); } }}>\n      <Modal.Header closeButton>\n        <Modal.Title>Import definitions from file ?</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <p>The definitions will be imported from the selected file.</p>\n        <Form>\n          <Form.File\n            label=\"Import file\"\n            custom\n            onChange={(ev: any) => onFileChange(ev.target.files[0])}\n          />\n        </Form>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={() => { if (onCancel) { onCancel(); } }}>Cancel</Button>\n      </Modal.Footer>\n    </Modal >\n  );\n}\n","import {\n    Scene, HemisphericLight, MeshBuilder, Vector3, StandardMaterial, Texture,\n    CubeTexture, Color3, FollowCamera, UniversalCamera, Viewport, SceneLoader,\n    AbstractMesh, Skeleton, IParticleSystem\n} from \"@babylonjs/core\";\nimport { Container } from \"react-bootstrap\";\nimport { SceneComponent } from \"./SceneComponent\";\nimport '@babylonjs/loaders';\nimport { MenuBar } from \"./MenuBar\";\nimport { Component } from \"react\";\nimport { ImportFile } from \"./ImportFile\";\nimport { homepage } from '../../package.json';\nimport { filter, map, tap, toArray } from 'rxjs/operators';\nimport { Observable } from \"rxjs\";\nimport { ajax } from 'rxjs/ajax';\nimport { csv, lines, vector3 } from \"./position-reader\";\n\nconst WebContext = homepage;\nconst MoonTextureUrl = `/${WebContext}/texture/moon.jpg`;\nconst PlatformTextureUrl = `/${WebContext}/texture/platform.jpg`;\nconst SkyBoxUrl = `/${WebContext}/texture/skybox`;\nconst RocketModelUrl = `/${WebContext}/objs/`;\nconst RocketFile = 'rocket.gltf';\nconst SampleUrl = `/${WebContext}/sample.csv`;\nconst PlatformRatio = 480 / 360;\nconst PlatformSize = 20;\nconst Viewpoint = new Vector3(-20, 1.7, 40);\n\nconst SampleInterval = 0.25;\n\n/**\n * \n */\nclass SceneStatus {\n    private _t: number;\n    private _sampleInterval: number;\n    private _path: Vector3[] | undefined;\n\n    constructor() {\n        this._t = 0;\n        this._sampleInterval = SampleInterval;\n    }\n\n    get t() { return this._t; }\n\n    get sampleInterval() { return this._sampleInterval; }\n\n    get path() { return this._path; }\n\n    set t(t: number) { this._t = t; }\n\n    set sampleInterval(sampleInterval: number) {\n        this._sampleInterval = sampleInterval;\n        this._t = 0;\n    }\n\n    set path(path: Vector3[] | undefined) {\n        this._path = path;\n        this._t = 0;\n    }\n\n    /**\n     * \n    * @param t \n    * @param dt \n    * @param path \n    */\n    position() {\n        const { path, t, sampleInterval } = this;\n        if (!path) {\n            return Vector3.Zero();\n        }\n        const n = path.length;\n        const duration = (n - 1) * sampleInterval;\n        if (t >= duration) {\n            return path[n - 1];\n        } else {\n            const nt = t / sampleInterval;\n            const i = Math.floor(nt);\n            const dl = nt - i;\n            const p0 = path[i];\n            const p1 = path[i + 1];\n            const p01 = p1.subtract(p0);\n            const p = p01.scale(dl).add(p0);\n            return p;\n        }\n    }\n\n    /**\n     * \n     * @param dt \n     */\n    last(dt: number) {\n        this.t = this.t + dt;\n        return this;\n    }\n\n    reset() {\n        this._t = 0;\n    }\n}\n\n/**\n * \n * @param sampleInterval \n * @param path \n */\nfunction createStatus(sampleInterval: number, path?: Vector3[]) {\n    const status = new SceneStatus();\n    status.path = path;\n    status.sampleInterval = sampleInterval;\n    return status;\n}\n\nconst status = createStatus(SampleInterval);\n\n/**\n * \n * @param scene \n */\nfunction createCamera1(scene: Scene) {\n    const camera = new FollowCamera(\"camera1\", Viewpoint, scene);\n    camera.radius = 45;\n    camera.heightOffset = 1.7;\n    camera.cameraAcceleration = 0.01;\n    camera.maxCameraSpeed = 200 / 3.6;\n    return camera;\n}\n\n/**\n * \n * @param scene \n */\nfunction createCamera2(scene: Scene) {\n    const camera = new UniversalCamera('camera2', Viewpoint, scene);\n    camera.attachControl(true);\n    return camera;\n}\n\n/**\n * \n * @param scene \n */\nfunction loadRocket(scene: Scene) {\n    // The first parameter can be set to null to load all meshes and skeletons\n    SceneLoader.ImportMesh('10475_Rocket_Ship_v1_L3', RocketModelUrl, RocketFile, scene,\n        (meshes: AbstractMesh[], particles: IParticleSystem[], skeletons: Skeleton[]) => {\n            onRocketLoad(scene, meshes[0]);\n        });\n}\n\n/**\n * \n * @param scene \n * @param rocket \n */\nfunction onRocketLoad(scene: Scene, rocket: AbstractMesh) {\n    const camera1 = scene.getCameraByName('camera1') as (FollowCamera | null);\n    const camera2 = scene.getCameraByName('camera2') as (UniversalCamera | null);\n    if (camera1 && camera2) {\n        rocket.name = 'rocket';\n        camera1.lockedTarget = rocket;\n        camera2.lockedTarget = rocket;\n\n        // const light = scene.getLightByName('light');\n        // if (light) {\n        //     const shadowGenerator = new ShadowGenerator(1024, light as DirectionalLight);\n        //     shadowGenerator.addShadowCaster(rocket);\n        // }\n    }\n}\n\nfunction buildSkybox(scene: Scene) {\n    const skybox = MeshBuilder.CreateBox(\"skyBox\", { size: 1200 }, scene);\n    const skyboxMaterial = new StandardMaterial(\"skyBox\", scene);\n    skyboxMaterial.backFaceCulling = false;\n    skyboxMaterial.reflectionTexture = new CubeTexture(SkyBoxUrl, scene);\n    skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    skyboxMaterial.diffuseColor = new Color3(0, 0, 0);\n    skyboxMaterial.specularColor = new Color3(0, 0, 0);\n    skybox.material = skyboxMaterial;\n    return skybox;\n}\n\n/**\n * \n * @param scene \n */\nfunction buildGround(scene: Scene) {\n    // Texture\n    const groundMat = new StandardMaterial(\"groundMat\", scene);\n    groundMat.diffuseTexture = new Texture(MoonTextureUrl, scene);\n\n    // Our built-in 'ground' shape.\n    const ground = MeshBuilder.CreateGround(\"ground\", { width: 1000, height: 1000, subdivisions: 2 }, scene);\n    ground.material = groundMat;\n    ground.position.y = -0.01;\n    // ground.receiveShadows = true;\n    return ground;\n}\n\n/**\n * \n * @param scene \n */\nfunction buildPlatform(scene: Scene) {\n    // Texture\n    const platMat = new StandardMaterial(\"platMat\", scene);\n    platMat.diffuseTexture = new Texture(PlatformTextureUrl, scene);\n\n    // Our built-in 'ground' shape.\n    const platform = MeshBuilder.CreateGround(\"platform\", {\n        width: PlatformSize * PlatformRatio,\n        height: PlatformSize * PlatformRatio,\n        subdivisions: 2\n    }, scene);\n    platform.material = platMat;\n    platform.receiveShadows = true;\n    return platform;\n}\n\n/**\n * \n * @param scene \n */\nfunction buildLights(scene: Scene) {\n    // This creates a light, aiming 0,1,0 - to the sky (non-mesh)\n    const light = new HemisphericLight(\"light\", new Vector3(1, 1, 0), scene);\n    // const light = new DirectionalLight(\"light\", new Vector3(1, -1, -1), scene);\n    // Default intensity is 1. Let's dim the light a small amount\n    light.intensity = 1;\n    return light;\n}\n\n/**\n * \n * @param scene \n */\nfunction onSceneReady(scene: Scene) {\n    const camera = createCamera1(scene);\n    const camera2 = createCamera2(scene);\n    camera.viewport = new Viewport(0, 0, 0.5, 1.0);\n    camera2.viewport = new Viewport(0.5, 0, 0.5, 1.0);\n\n    scene.activeCameras?.push(camera);\n    scene.activeCameras?.push(camera2);\n\n    buildLights(scene);\n    buildGround(scene);\n    buildPlatform(scene);\n    buildSkybox(scene);\n    loadRocket(scene);\n}\n\n/**\n * \n * @param scene \n */\nfunction onRender(scene: Scene) {\n    const dt1 = scene.getEngine().getDeltaTime() / 1000;\n    status.last(dt1);\n    const rocket = scene.getMeshByName('rocket');\n    if (rocket) {\n        rocket.position = status.position();\n    }\n}\n\nfunction positionVectors() {\n    return (obs: Observable<string>) => obs.pipe(\n        lines(),\n        filter(text => !!text),\n        csv(),\n        vector3(0),\n        toArray()\n    );\n}\n\n/**\n * \n */\nexport class Home extends Component<{}, {\n    importModalShown: boolean\n}>{\n\n    /**\n     * \n     * @param props \n     */\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            importModalShown: false\n        };\n    }\n\n    componentDidMount() {\n        const obs = ajax({\n            url: SampleUrl,\n            responseType: 'text'\n        }).pipe(\n            map(data => data.response),\n        );\n        this.importFile(obs);\n\n    }\n\n    /**\n     * \n     */\n    private showImportPanel() {\n        this.setState({ importModalShown: true });\n    }\n\n    /**\n     * \n     */\n    private onImportCancel() {\n        this.setState({ importModalShown: false });\n    }\n\n    private importFile(data: Observable<string>) {\n        data.pipe(\n            positionVectors(),\n            tap(\n                data => this.onPathReady(data),\n                err => this.onImportError(err)\n            )\n        ).subscribe();\n    }\n\n    /**\n     * \n     * @param data \n     */\n    private onImportFile(data: Observable<string>) {\n        this.setState({ importModalShown: false });\n        this.importFile(data);\n    }\n\n    private onPathReady(path: Vector3[]) {\n        status.path = path;\n    }\n    /**\n     * \n     * @param error \n     */\n    private onImportError(error: any) {\n        console.error(error);\n    }\n\n    render() {\n        const { importModalShown } = this.state;\n        return (\n            <Container fluid>\n                <MenuBar\n                    onImport={() => this.showImportPanel()}\n                    onReplay={() => status.reset()}\n                />\n                <Container fluid>\n                    <SceneComponent antialias\n                        width={1400}\n                        height={640}\n                        onSceneReady={onSceneReady}\n                        onRender={scene => { onRender(scene) }}\n                        id='rocket-canvas' />\n                </Container>\n                <ImportFile show={importModalShown}\n                    onCancel={() => { this.onImportCancel() }}\n                    onSelect={obs => this.onImportFile(obs)} />\n            </Container>\n        );\n    }\n}\n","import { from } from \"rxjs\";\nimport { flatMap, map } from \"rxjs/operators\";\nimport { Vector3 } from \"@babylonjs/core\";\n\n/**\n * \n * @param line \n */\nexport function vector3(offset: number) {\n    return map((data: number[]) => new Vector3(data[offset], data[offset + 2], data[offset + 1]));\n}\n\n/**\n * \n */\nexport function csv() {\n    return map((line: string) => line.split(',').map(parseFloat));\n}\n\n/**\n * \n */\nexport function lines() {\n    return flatMap((text: string) => from(text.split(/\\r\\n|\\n/)))\n}\n","import './App.css';\nimport { Home } from './modules/Home';\n\nfunction App() {\n  return (\n    <Home/>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}